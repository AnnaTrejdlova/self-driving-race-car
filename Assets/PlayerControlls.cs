//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f3407ea3-225a-42f3-95ff-eebbceb44f4c"",
            ""actions"": [
                {
                    ""name"": ""SteerLeft"",
                    ""type"": ""Button"",
                    ""id"": ""5eb00270-1557-4032-ae6f-d5746462c75c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SteerRight"",
                    ""type"": ""Button"",
                    ""id"": ""dc7012b7-8e11-4d50-a561-593a7027de2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""ee4552f3-519c-4bcc-a86c-59f88384b41c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""dbe0e071-6dca-4af1-a730-b2b69dc37abb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Handbrake"",
                    ""type"": ""Button"",
                    ""id"": ""576bcc7e-6f8a-4d64-821f-a73223c90bcd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftUp"",
                    ""type"": ""Button"",
                    ""id"": ""d4d78d38-b727-46da-8048-76fc7dba38f0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShiftDown"",
                    ""type"": ""Button"",
                    ""id"": ""7266b03a-8a86-4473-b350-ddd7a738f890"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleTelemetry"",
                    ""type"": ""Button"",
                    ""id"": ""fa74c7a5-656b-4d09-97e4-22df3f0d4551"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartEngine"",
                    ""type"": ""Button"",
                    ""id"": ""5101d83a-4f2d-4c2e-91ab-94b7dada37ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""4b87a60e-3bf1-430d-81af-6a176b1f46f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Camera"",
                    ""type"": ""Button"",
                    ""id"": ""eb7a9d68-9064-480b-a27e-402488ac4877"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23e21205-9827-4f88-ae36-8de8a212947b"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6944aa7c-7811-4343-afdf-f9dc8887dceb"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SteerRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""844ce967-29b3-49fe-a420-4f10925a224d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0dbeb323-73bf-4de1-af72-33acba459eba"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f50e872f-436c-49f5-a737-4b720ac1120c"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Handbrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""22f961f2-aa34-49df-a958-afaa7e9b165e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85e8d0fa-c94d-46ce-b0dd-0f8c092a83c7"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShiftDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8a60eee-222d-40b3-a740-b51ab80252f0"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleTelemetry"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c173793-9287-4796-b333-35a7882746ea"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartEngine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a691863-ca30-45fc-b40f-0f76332462bb"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""31068394-1cd2-45f9-be3d-2e26a17fe8fb"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Xbox Gamepad"",
            ""bindingGroup"": ""Xbox Gamepad"",
            ""devices"": []
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_SteerLeft = m_Gameplay.FindAction("SteerLeft", throwIfNotFound: true);
        m_Gameplay_SteerRight = m_Gameplay.FindAction("SteerRight", throwIfNotFound: true);
        m_Gameplay_Accelerate = m_Gameplay.FindAction("Accelerate", throwIfNotFound: true);
        m_Gameplay_Brake = m_Gameplay.FindAction("Brake", throwIfNotFound: true);
        m_Gameplay_Handbrake = m_Gameplay.FindAction("Handbrake", throwIfNotFound: true);
        m_Gameplay_ShiftUp = m_Gameplay.FindAction("ShiftUp", throwIfNotFound: true);
        m_Gameplay_ShiftDown = m_Gameplay.FindAction("ShiftDown", throwIfNotFound: true);
        m_Gameplay_ToggleTelemetry = m_Gameplay.FindAction("ToggleTelemetry", throwIfNotFound: true);
        m_Gameplay_StartEngine = m_Gameplay.FindAction("StartEngine", throwIfNotFound: true);
        m_Gameplay_Pause = m_Gameplay.FindAction("Pause", throwIfNotFound: true);
        m_Gameplay_Camera = m_Gameplay.FindAction("Camera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_SteerLeft;
    private readonly InputAction m_Gameplay_SteerRight;
    private readonly InputAction m_Gameplay_Accelerate;
    private readonly InputAction m_Gameplay_Brake;
    private readonly InputAction m_Gameplay_Handbrake;
    private readonly InputAction m_Gameplay_ShiftUp;
    private readonly InputAction m_Gameplay_ShiftDown;
    private readonly InputAction m_Gameplay_ToggleTelemetry;
    private readonly InputAction m_Gameplay_StartEngine;
    private readonly InputAction m_Gameplay_Pause;
    private readonly InputAction m_Gameplay_Camera;
    public struct GameplayActions
    {
        private @PlayerControlls m_Wrapper;
        public GameplayActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SteerLeft => m_Wrapper.m_Gameplay_SteerLeft;
        public InputAction @SteerRight => m_Wrapper.m_Gameplay_SteerRight;
        public InputAction @Accelerate => m_Wrapper.m_Gameplay_Accelerate;
        public InputAction @Brake => m_Wrapper.m_Gameplay_Brake;
        public InputAction @Handbrake => m_Wrapper.m_Gameplay_Handbrake;
        public InputAction @ShiftUp => m_Wrapper.m_Gameplay_ShiftUp;
        public InputAction @ShiftDown => m_Wrapper.m_Gameplay_ShiftDown;
        public InputAction @ToggleTelemetry => m_Wrapper.m_Gameplay_ToggleTelemetry;
        public InputAction @StartEngine => m_Wrapper.m_Gameplay_StartEngine;
        public InputAction @Pause => m_Wrapper.m_Gameplay_Pause;
        public InputAction @Camera => m_Wrapper.m_Gameplay_Camera;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @SteerLeft.started += instance.OnSteerLeft;
            @SteerLeft.performed += instance.OnSteerLeft;
            @SteerLeft.canceled += instance.OnSteerLeft;
            @SteerRight.started += instance.OnSteerRight;
            @SteerRight.performed += instance.OnSteerRight;
            @SteerRight.canceled += instance.OnSteerRight;
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Handbrake.started += instance.OnHandbrake;
            @Handbrake.performed += instance.OnHandbrake;
            @Handbrake.canceled += instance.OnHandbrake;
            @ShiftUp.started += instance.OnShiftUp;
            @ShiftUp.performed += instance.OnShiftUp;
            @ShiftUp.canceled += instance.OnShiftUp;
            @ShiftDown.started += instance.OnShiftDown;
            @ShiftDown.performed += instance.OnShiftDown;
            @ShiftDown.canceled += instance.OnShiftDown;
            @ToggleTelemetry.started += instance.OnToggleTelemetry;
            @ToggleTelemetry.performed += instance.OnToggleTelemetry;
            @ToggleTelemetry.canceled += instance.OnToggleTelemetry;
            @StartEngine.started += instance.OnStartEngine;
            @StartEngine.performed += instance.OnStartEngine;
            @StartEngine.canceled += instance.OnStartEngine;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @Camera.started += instance.OnCamera;
            @Camera.performed += instance.OnCamera;
            @Camera.canceled += instance.OnCamera;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @SteerLeft.started -= instance.OnSteerLeft;
            @SteerLeft.performed -= instance.OnSteerLeft;
            @SteerLeft.canceled -= instance.OnSteerLeft;
            @SteerRight.started -= instance.OnSteerRight;
            @SteerRight.performed -= instance.OnSteerRight;
            @SteerRight.canceled -= instance.OnSteerRight;
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Handbrake.started -= instance.OnHandbrake;
            @Handbrake.performed -= instance.OnHandbrake;
            @Handbrake.canceled -= instance.OnHandbrake;
            @ShiftUp.started -= instance.OnShiftUp;
            @ShiftUp.performed -= instance.OnShiftUp;
            @ShiftUp.canceled -= instance.OnShiftUp;
            @ShiftDown.started -= instance.OnShiftDown;
            @ShiftDown.performed -= instance.OnShiftDown;
            @ShiftDown.canceled -= instance.OnShiftDown;
            @ToggleTelemetry.started -= instance.OnToggleTelemetry;
            @ToggleTelemetry.performed -= instance.OnToggleTelemetry;
            @ToggleTelemetry.canceled -= instance.OnToggleTelemetry;
            @StartEngine.started -= instance.OnStartEngine;
            @StartEngine.performed -= instance.OnStartEngine;
            @StartEngine.canceled -= instance.OnStartEngine;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @Camera.started -= instance.OnCamera;
            @Camera.performed -= instance.OnCamera;
            @Camera.canceled -= instance.OnCamera;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    private int m_XboxGamepadSchemeIndex = -1;
    public InputControlScheme XboxGamepadScheme
    {
        get
        {
            if (m_XboxGamepadSchemeIndex == -1) m_XboxGamepadSchemeIndex = asset.FindControlSchemeIndex("Xbox Gamepad");
            return asset.controlSchemes[m_XboxGamepadSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnSteerLeft(InputAction.CallbackContext context);
        void OnSteerRight(InputAction.CallbackContext context);
        void OnAccelerate(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnHandbrake(InputAction.CallbackContext context);
        void OnShiftUp(InputAction.CallbackContext context);
        void OnShiftDown(InputAction.CallbackContext context);
        void OnToggleTelemetry(InputAction.CallbackContext context);
        void OnStartEngine(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnCamera(InputAction.CallbackContext context);
    }
}
